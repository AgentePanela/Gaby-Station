using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Content.Client.Administration.Managers;
using Robust.Client.Console;
using Content.Client._Goobstation.ServerCurrency;

namespace Content.Client._Gabystation.ServerCurrency.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class CurrencyWindow : DefaultWindow
    {
        [Dependency] private readonly ServerCurrencySystem _serverCur = default!;
        [Dependency] private readonly IClientAdminManager _adminManager = default!;
        [Dependency] private readonly IClientConsoleHost _consoleHost = default!;
        private bool isAdmin = false;
        public CurrencyWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            UpdatePlayerBalance();

            isAdmin = _adminManager.CanCommand("balance:add");

            if(!isAdmin){
                Admin.Visible = false;
            };

            GiftButton.OnPressed += _ => Transfer(GiftPlayer.Text, int.Parse(GiftAmmount.Text));

            AdminAddButton.OnPressed += _ => AdminAdd(AdminAddPlayer.Text, int.Parse(AdminAddAmmount.Text));

            _serverCur.BalanceChange += UpdatePlayerBalance;
        }

        private void Transfer(string player, int value)
        {
            if(player == null || value == 0)
                return;

            _consoleHost.ExecuteCommand("gift " + player + " " + value);
        }

        private void AdminAdd(string player, int value)
        {
            if(!isAdmin)
                return;

            if(player == null || value == 0)
                return;

            _consoleHost.ExecuteCommand("balance:add " + player + " " + value);
        }

        private void UpdatePlayerBalance() // Goobstation - Goob Coin
        {
            Header.Text = _serverCur.Stringify(_serverCur.GetBalance());
        }
    }
}
